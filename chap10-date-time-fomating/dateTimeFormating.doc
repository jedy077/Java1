1.날짜와 시간
1.1 Calendar와 Date

Calendar와 GregorianCalendar
Calendar는 추상클래스이기 때문에 직접 객체를 생성할 수 없고, 메서드를 통해서 완전히 구현된 클래스의 인스턴스를 얻어야 한다. 
Calendar cal = Calendar.getInstance();

Calendar를 상속받아 완전히 구현된 클래스로는 GregorianCalendar 와 BuddhistCalenrda가 있는데 getInstance()는 시스템의 국가와 지역설정을 확인해서 태국인 경우에는 BuddhistCalendar의 인스턴스를 반환하고, 그 외에는 GregorianCalendar의 인스턴스를 반환한다. 

class MyApplication {
	public static void main(String[] args) {
		Calendar cal = new GregorianCalendar(); // 경우에 따라 이 부분을 수정해야 함 --> 태국인경우
	}
}


class MyApplication {
	public static void main (String[] args) {
		Calendar cal = Calendar.getInstance();
	}
}

이럴 경우 getIntance() 의 내용은 달라져야 하겠지만, MyApplication 이 변경되지 않아도 된다는 것이 중요하다. 

Date와 Calendar간의 변환
Date 은 오래 되었지만, 아직 많이 사용하고 필요한 메서드가 많이 있기 때문에 변환이 필요할 수 있다. 
1. Calendar를 Date로 변경
	Calendar cal1 = Calendar.getInstance();
	Date d = new Date(cal1.getTimeInMillis()); // Date(long date)

2. Date를 Calendar로 변환
	Date d = new Date();
	Calendar cal = Calendar.getInstance();
	cal.setTime(d);


2. 형식화 클래스 (java.txt)
2.1 DecimalFormat
형식화 클래스 중에서 숫자를 형식화 하는데 사용되는 것이 DecimalFormat이다. 
0	10진수(값이 없을 때 0으로 체워짐)
#	10진수
.	소숫점
-	음수부호
,	단위구분자
E	지수기호
;	패턴구분자
%	퍼센트
\u2030	퍼밀(퍼센트*10)
\u00A4	통화
'	escape문자

double number = 1234567.89;
DecimalFormat df = new DecimalFormat("#.#E0");
String result = df.format(number);


2.2 SimpleDateFormat
G	연대(BC, AD)
y	년도
M	월(1~12 또는 1월 ~ 12월)
w	년의 몇 번째 주( 1~53주)
W	월의 몇 번째 주( 1~5)
D	년의 몇번째 일 ( 1~ 366)
d	월의 몇 번째 일 ( 1 ~ 31)
F	월의 몇 번째 요일 (1~5)
E	요일
a	오전/오후(AM,PM)
H	시간(0~23)
k	시간(1~24)
K	시간(0~11)
h	시간(1~12)
m	분(0~59)
s	초(0~59)
S	천분의 일초(0~999)
z	Time Zone(General time zone)
Z	Time zone( RFC 822 time zone)
'	escape문자


2.3 ChoiceFormat
ChoiceFormat ㅇㅡㄴ 특정 범위에 속하는 값을 문자열로 변환해준다.
연속적 또는 불연속적인 범위의 값들을 처리하는 데 있어서 if문이나 switch 문은 적절하지 못한 경우가 많다. 
이럴때 ChoiceFormat을 잘 사용하면 복잡하게 처리될 수밖에 없었던 코드를 간단하고 직관적으로 만들 수 있다. 

String patten의 경우 2가지 구분자 # 와 < 제공. 'limit#value' #은 경계값을 범위를 포함시키지만 < 은 포함시키지 않는다. 

2.4 MessageFormat
MessageFormat은 데이터를 정해진 양식에 맞게 출력할 수 있도록 도와준다. 
데이터가 들어갈 자리를 마련해 높은 양식을 미리 작성하고 프로그램을 이용해서 다수의 데이터를 같은 양식으로 출력할 때 사용하면 좋다. 

String msg = "Name:{0}\nTel:{1}... ";
{숫자} 데이터가 출력될 자리
Obejct[] argument = { "dldaf", "afadf"};
String result = MessageFormat.format(msg,arguement);


3. java.time패키지
Java의 탄생부터 지금까지 날짜와 시간을 다루는데 사용해 왔던 Date/Calendar가 가지고 있는 단점을 해소하기 위해 java.time 추가

java.time		날짜와 시간을 다루는데 필요한 핵심 클래스들을 제공
java.time.chrono	표준(ISO)이 아닌 달력 시스템을 위한 클래스들을 제공
java.time.format	날짜와 시간을 파싱하고, 형식화하기 위한 클래스들을 제공
java.time.temporal	날짜와 시간의 필드와 단위를 위한 클래스를 제공
java.time.zone		시간대와 관련된 클래스들을 제공
위의 패키지들에 속한 클래스들의 가장 큰 특징은 String클래스처럼 '불변'이라는 것이다. 

3.1 java.time 패키지의 핵심 클래스
날짜와 시간을 하나로 표현하는 Calendar클래스와는 달리,
java.time패키지에는 날짜와 시간을 별도의 클래스로 분리해 놓았다. 
시간을 표현할 때는 = LocalTime class
날짜를 표현할 때는 = LocalDate class
그리고 날짜/시간 모두 표현할 때는 = LocalDateTime class

Period와 Duration
Period 는 두 날짜간의 차이를 표현하기 위한 것이고,
Duration은 시간 차이를 표현하기 위한 것이다. 

객체 생성하기
now(), of()
java.time 패키지에 속한 클래스의 객체를 생성하는 가장 기본적인 방법은 now(), of()를 사용하는 것이다. 
LocalDate date = LocalDate.now();
LocalTime time = LocalTime.now();
LocalDateTime = LocalDateTime.now();
ZonedDateTime = ZonedDateTime.now();

LocalDate date = LocalDate.of(2022,05,25);
LocalTime time = LocalTime.of(23,59,59);
LocalDateTime dateTime = LocalDateTime.of(date, time)
ZonedDateTime dateTimeInKr = ZonedDateTime.of(dateTime, ZoneId.of("Asia/Seoul");

Temporal과 TemporalAmount

Temporal, TemporalAccessor, TemporalAdjuster 를 구현한 클래스
 - LocalDate, LocalTime, LocalDateTime, ZonedDateTime, Instant 등
TemporalAmount를 구현한 클래스
 - Period, Duration

TemporalUnit과 TemporalField
날짜와 시간의 단위를 정의해 높은 것이 TemporalUnit인터페이스이고, 이 인터페이스를 구현한 것이 열거형 ChronoUnit이다. 
그리고 TemporalField는 년, 월, 일 등 날짜와 시간의 필드를 정의해 높은 것으로, 열거형 ChronoField가 이 인터페이스를 구현하였다. 

LocalTime now = LocalTime.now();
int minute = now.getMinute();
// int minute = now.get(ChronoField.MINUTE_OF_HOUR);// 위와 동일

LocalDate today = LocalDate.now();
LocalDate tomorrow = today.plus(1, ChronoUnit.DAYS);
LocalDAte tomorrow = today.plusDays(1);

int get(TemporalField field)
LocalDate plus(long amountToAdd, TemporalUnit unit)

boolean isSupported (TemporalUnit unit)
boolean isSupported (TemporalField field)


3.2 LocalDate 과 LocalTime
객체를 생성하는 방법은 현재의 날짜와 시간을 LocalDate/LocalTime 으로 각각 반환하는 now()와
지정된 날짜와 시간을 LocalDate/LocalTime으로 반환하는 of();

of()의 버젼
static LocalDate of(int year, Month month, int dayOfMonth);
static LocalDate of(int year, int month, int dayOfMonth);

static LocalTime of(int hour, int min);
static LocalTime of(int hour, int min, int sec)
static LocalTime of(int hour, int min, int sec, int nanoOfSecond)

특정 필드의 값 가져오기 - get(), getXXX()
LocalDate와 LocalTime의 객체에서 특정 필드의 값을 가져올 때는 아래의 표에 있는 메서드를 사용한다. 

LocalDate class
int	getYear()	년도
int	getMonthValue()	월(12)
int	getMonth()	월(DECEMBER). getMonthValue() = 12
int	getDayOfMonth()	일(31)
int	getDayOfYear()	같은 해의 1월 1일 부터 몇뻔재(365)
DayOfWeek	getDayOfWeek()	요일(Friday) getDayOfWeek().getValue()=5
int	lengthOfMonth()	같은 달의 총 일수 (31)
int	lengthOfYear()	같은 해의 총 일수 (365), 윤년이면 366

LocalTime class
int	getHour()	시(23)
int	getMinute()	분(59)
int	getSecond()	초(59)
int	getNano()	나노초(0)

필드의 값 변경하기 - with(), plus(), minus()

LocalDate withYear(int year)
LocalDAte withMonth(int month)
LocalDate withDayOfMonth(int dayOfMonth)
LocalDate withDayOfYear(int dayOfYear)

LocalTime withHour(int hour)
LocalTime withMinute(int minute)
LocalTime withSecond(int second)
LocalTime withNano (int nanoOfSecond)

날짜와 시간의 비교 -isAfter(), isBefore(), isEqual()

