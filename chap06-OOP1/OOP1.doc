1. 객체지향의 언어(Object Oriented Program)
1.1 객체지향의 역사 
객체지향이론의 기본 개념은 '실제 세계는 사물로 이루어져 있으며, 발생하는 모든 사건들은 사물간의 상호작용이다.'라는 것이다. 

1.2 객체지향언어
주요특징
*코드의 재사용성이 높다. : 새로운 코드를 작성할 때 기존의 코드를 이용하여 쉽게 작성할 수 있다. 
*코드의 관리가 용이하다. : 코드간의 관계를 이용해서 적은 노력으로 쉽게 코드를 변경할 수 있다. 
*쉰로성이 높은 프로그래밍을 가능하게 한다. : 제어자와 메서드를 이용해서 데이터를 보호하고 올바른 값을 유지하도록 하며, 코드의 중복을 제거하여 코드의 불일치로 인한 오동작을 발지할 수 있다. 

2. 클래스와 객체
2.1 클래스와 객체의 정의의 용도
클래스의 정의 : 클래스란 객체를 정의해 놓은 것이다. 
클래스의 용도 : 클래스는 객체를 생성하는데 사용된다.

객체의 정의 : 실제로 존재하는 것, 사물 또는 개념
객체의 용도 : 객체가 가지고 있는 기능과 속성에 따라 다르ㅏㅁ.
유형의 객체 : 책상, 의자, 자동차 , TV 같은 사물
무형의 객체 : 수학공식 프로그램 에러와 같은 논리나 개념.

2.2 객체와 인스턴스
클래스로부터 객체를 만드는 과정을 클래스의 인스턴스화라고 하며, 어떤 클래스로부터 만들어진 객체를 그 클래스의 인스턴스라고 한다. 

2.3 객체의 구성요소 - 속성과 기능
객체는 속성과 기능, 두 종류의 구성요소로 이루어져 있으며, 일반적으로 객체는 다수의 속성과 다수의 기능을 갖는다. 
객체가 가지고 있는 속성과 기능을 그 객체의 구성원 (member)라고 한다. 
*속성(property): 멤버변수(member variable), 특성(attirbute), 필드(field), 상태(state)
*기능(function): 메서드(method), 함수(function), 행위(behavior)

2.4 인스턴스의 생성과 사용
클래스 변수명;
변수명 = New 클래스명();
TV t;
t = new TV();

2.5 객체 배열
많은 수의 객체를 다뤄야 할 때, 배열로 다루면 편리할 것이다. 
객체 역시 배열로 다루는 것이 가능하며, 이를 '객체 배열'이라 한다. 

Tv tv1, tv2, tv3;  --> Tv[] tvArr = new Tv[3];   // 객체 배열을 생성한 것이지, 개체가 저장되어 있지 않다.  // 배열생성은 공간을 만들어 두는 것이지 값을 넣는 작업은 아직 아니다. " 여기서 new 에 햇갈리지 말자 new 란 참조 변수를 만드는 작업이며, new 뒤에 작업을 하여 그 값의 주소를 return 하는 문장이다. 
tvArr[0] = new Tv();
tvArr[1] = new Tv();
tvArr[2] = new Tv();

그러나 위와 같이 하면 손이 많이 가니 배열 초기화 블럭을 써서 한번에 해결하자.
Tv[] tvArr = { new tv(), new tv(), new tv()};

2.6 클래스의 또 다른 정의
프로그램적 의미
1.클래스 - 데이터와 함수의 결합
** 변수의 발절 과정 : 변수 -> 배열 -> 구조체 -> 클래스 
** 1. 변수 : 하나의 데이터를 저장할 수 있는 공간
** 2. 배열 : 같은 종류의 여러 데이터를 하나의 집합으로 저장하 수 있는 공간
** 3. 구조체 : 서로 관련된 여러 데이터를 종류에 관계없이 하나의 집합으로 저장할 수 있는 공간
** 4. 클래스 : 데이터와 함수의 결합 (구조체 + 함수)

2. 클래스 - 사용자정의 타입 (user-defined type)




3.변수와 메서드
3.1 선언위치에 따른 변수의 종류
클래스 변수, 인스턴스 변수, 지역 변수 3종류 존재
변수에 종류를 결정짓는 중요한 요소는 '변수의 선언된 위치'이므로 변수의 종류를 파악하기 위해서는 변수가 어느 영역에 선언되었늕를 확인하는 것이 중요하다.
멤버 변수를 제외한 나머지 변수들은 모두 지역변수이며, 멤버 변수 중 static 붙은 것은 클래스 변수, 붙지 않은 것은 인스턴스 변수 이다. 

class Variables
{
	int iv;			// 멤버변수 & 인스턴스 변수
	static int cv;		// 멤버변수 & 클래스 변수

	void method(){
		int lv = 0;	// 지역변수 
	}
}


변수 생성시기
------------------------------------------
클래스 변수  - 클래스 영역  - 클래스가 메모리에 올라갈 때
인스턴스 변수 - 클래스 영역 - 인스턴스가 생성되었을 때
지역 변수 - 클래스 이외의 영역 - 변수 선언문이 수행이 되었을 때

1. 인스턴스 변수(instance variable)
클래스 영역에 선언되며, 클래스의 인스턴스를 생성할 때 만들어 진다. 그렇게 때문에 인스턴스 변수의 값을 읽어 오거나 저장하기 위해서는 먼저 인스턴스를 생성해야 한다. 
인스턴스는 독립적인 공간을 가지므로 서로 다른 값을 가진ㄹ 수 있다. 인스턴스마다 고유한 상태를 유지해야하는 속성인 경우, 인스턴스 변수로 선언한다. 

2. 클래스 변수 (class variable)
클래스 변수를 선언하는 방법은 인스턴스 변수 앞에 static을 붙이기만 하면 된다. 
인스턴스마다 독립적인 저장공간을 갖는 인스턴스변수와는 달리, 클래스 변수는 모든 인스턴스가 공통된 저장공간(변수)을 공유하게 된다. 
한 클래스의 모든 인스턴스들이 공통적인 값을 유지해야하는 속성의 경우, 클래스 변수로 선언해야 한다. 
클래스 변수는 인스턴스변수와 달리 인스턴스를 생성하지 않고도 언제라도 바로 사용할 수 있다는 특징이 있으며, 클래스이름.클래스변수'와 같은 형식으로 사용한다. 
ㅡㄹ래스가 메모리에 '로딩'될 때 생성되어 프로그램이 종료될 때까지 유지되며, public 을 앞에 붙이면 같은 프로그램 내에서 어디서나 접근할 수 있는 '전역변수(global variable'의 성격을 갖는다. 

3. 지역 변수 (local variable)
메서드 내에 선언되어 메서드 내에서만 사용 가능하며, 메서드가 종료되면 소멸되어 사용할 수 없게 된다. 
for문 또는 while문의 블럭 내에 선언된 지역별수는 , 지역변수가 선언된 블럭{} 내에서만 사용 가능하며, 블럭{}을 벗어나면 소멸되어 사용할 수 없게 된다. 

3.2 클래스 변수와 인스턴스 변
인스턴스가 공통으로 가지고 있는 변수의 경우 - 클래스 변수를 사용하는 것이 좋다. 
인스턴스 변수의 경우 인스턴스 마다 다른 값을 가지고 있을 경우 이 변수를 인스턴스 변수로 선언하자. 
카드의 경우 크기는 인스턴스 마다 동일하지만, 무늬 숫자는 다르다고 판단할 수 있다. 
이 경우 클래스 변수는 width height 가 될 것이며, number,shape 는 인스턴스 변수가 될 것이다. 
이 의미는 카드의 크기가 커 질수 있고 작아 질수도 있다. 그러나 52자의 모든 카드가 일정한 크기를 가져야 하므로, 모두 커지던가 모두 작아져야 한다. 하지만 각각의 카드의 number와 shape 는 각기 다른 카드의 값을 가져야 하므로 instance 변수를 선언하는 것이 효과적이다.

3.3 메서드
'메서드(method)'는 특정 작업을 수행하는 일련의 문장들을 하나로 묶은 것이다. 

*메서드를 사용하는 이유
1. 높은 재사용성(reuserability)
2. 중복된 코드의 제거
3. 프로그램의 구조화

3.4 메서드의 선언과 구현
메서드는 크게 선언부 (header), 구현부(body) 로 이루어져 있다. 

반환타입 메서드이름 (타입 변수명, 타입 변수명, ... ) 
{
	// 메서드 호출시 수행될 코드
}

*메서드 선언부(method declaration, method hearder)
메서드 선언부는 '메서드 이름', '매개변수 선언', '반환타입'으로 구성되어 있으며, 메서드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는지에 대한 정보를 제공한다. 
** 메서드 선언시 후에 변경사항이 발생하지 않도록 신중히 작성할 것. 

*메서드 구현부 (method body)
{} 몸통을 작성하면 된다. 

*지역변수
메서드 내에 선언된 변수 - 메서드 내에서만 사용 가능, 서로 다른 메서드라면 같은 이름의 변수를 선언해도 된다. 

3.5 메서드의 호출
*인자(argument) & 매개변수(parameter)
*메서드의 실행 흐름
같은 클래스 내의 메서드끼리는 참조변수를 사용하지 않고도 서로 호출이 가능하지만, static 메서드는 같은 클래스 내의 인스턴스 메서드를 호출 할 수 없다. 

class MyMath {
	long add (long a, long b) {
		long result = a + b;
		return result ;
	}
	long subtract ( long a , long b) { return a-b;}
	long multiply( long a,long b) { return a * b; }
	long divide (double a, double b) { return a / b; }
}

3.6 return 문
return 문은 현재 실행중인 메서드를 종료하고 호출한 메서드로 되돌아간다. void 의 경우 return 문이 없어도 돌아간 이유는 compiler가 자동으로 메서드의 마지막에 추가해 줬기 때문이다. 

** 매개변수의 유효성 검사 : 실제 프로그램을 작성할 때 넘어온 매개 변수의 값이 유효한지 검사하는 문장을 넣어 주는 것이 좋다. 

3.7 JVM의 메모리 구조
응용프로그램이 실행되면, JVM은 시스템으로부터 프로그램을 수행하는데 필요한 메모리를 할당받고 JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리한다. 
그 중 3가지 주요 영역(method area, call stack, heap)에 대해서 알아보자. 

1. 메서드 영역 (method area)
프로그램 실행 중 어떤 클래스가 사용되면, JVM은 해당 클래스의 클래스파일(*.class)을 읽어서 분석하여 클래스에 대한 정보(클래스 데이터)를 이곳에 저장한다. 이때 그 클래스의 클래스 변수(class variable)도 이 영역에 함께 생성된다. 

2. 힙(heap)
인스턴스가 생성되는 공간, 프로그램 실행 중 생성되는 인스턴스는 모두 이곳에 생성된다. 
즉 인스턴스변수(intance variable)들도 이 영역에 함께 생성된다.

3. 호출 스택(call stack or execution stack)
호출 스택은 메서드의 작업에 필요한 메모리 공간을 제공한다. 메서드가 호출되면, 호출스택에 호출된 메서드를 위한 메모리가 할당되며, 미 메모리는 메서드가 작업을 수행하는 동안 지역변수(매개변수 포함)들과 연산의 중간 결과 등을 저장하는데 사용된다. 
그리고 메서드가 작업을 마치면 할당되었던 메모리공간은 반환되어 비어진다. 
** 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다.
** 메서드가 수행을 마치고나면 사용했던 메모리를 반환하고 스택에서 제거된다.
** 호출스택의 제일 위에 있는 메서드가 현재 실행 중인 메서드이다.
**아래에 있는 메서드가 바로 위의 메서드를 호출한 메서드이다.

class CallStackTeet{
	public static void main (String[] args){
		firstMethod();
	}
	static void firstMethod() {
		secondMethod();
	}
	static void secondMethod() {
		System.out.println("secondMethod()");

3.8 기본형 매개변수와 참조형 매개변수
매개변수 전달 시 
기본형(primitive type)의 경우 값이 복사가 됨
참조형(reference type)의 경우 주소가 전달 - 즉 참조형은 값을 읽어 오는 것도 가능하지만, 변경도 가능하다. 

class Data { int x; }

class primitiveParamEx {
  public static void main (String args) {
	Data d = new Data();
	d.x = 10;
	System.out.println("main() : x = "  + d.x);

	change(d.x);
	System.out.println("After change(d.x)");
	System.out.println("main() : x = " + d.x);
	}

	static void change (int x) {
		x = 1000;
		System.out.println("change() : x = " + x);
	}
   }
}


vs

class Data { int x; }
class ReferenceParamEx {
	public static void main(String[] args){
		Data d = new Data();
		d.x = 10;
		System.out.println("main() : x = "  + d.x);
		
		change(d);		
		System.out.println("After change(d)");
		System.out.println("main() : x = "  + d.x);
	}
	static void change(Data d){
		d.x = 1000;
		System.out.println("change() : x  = " + d.x);
	}
}


3.9 참조형 반환타입.

3.10 재귀호출(recursive call)
메서드의 내부에ㅓ 메서드 자신을 다시 호출하는 것을 재귀호출 이라하고 재귀호출을 하는 메서드를 재귀 메서드라 한다.
