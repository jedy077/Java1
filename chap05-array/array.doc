1.배열(array)
1.1 배열이란?? - 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것을 배열이라 한다. (배열은 같은 타입이다)
1.2 배열의 선언과 생성(배열을 의미하는 [])
int[] score;
int score[];
: 상위 의미는 동일하다, 이 부분을 배열의 선언이라 하며
new int[크기] :  new 연산자와 함께 배열을 생성한다. 

int[] score = new int[5];
int[] score;
score = new int[5];  <== 메모리에 빈 공간의 int형 데이터를 저장할 수 있는 공간이 마련된다.
그리고 각 배열요소는 자동적으로 default 0 으로 초기화 된다. 
여기서 score 는 참조 변수(reference type 의 변수이다.) 즉 배열 공간의 시작 주소를 가지고 있다. 

1.3 배열의 길이와 인덱스
생성된 배열의 각 저장공간을 '배열의 요소(element)'라 한다. 
각 배열의 요소에 접근하기 위해서는 배열이름[index]로 접근하며 , index(인덱스)는 0 ~ 배열의길이(갯수) -1 이다. 
만약 index 범위를 넘어서 참조가 일어날경우 아래와 같이 에러가 발생.
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException:

배열의 길이(array.length) - 배열이름.length를 이용하여 배열 길이(갯수를 알수 있다. )

배열의 길이 변경하기
1. 더큰 배열을 새로 생성하여, 기존 배열의 내용을 새로운 배열에 복사한다. 

1.4 배열의 초기화 
for 문을 이용하거나 값을 하나씩 넣거나 아니면
int[] score = new int[]{50, 60, 70, 80, 90} 
같이 배열 생성 및 초기화를 같이 진행 할수 있다. 

new int[] 는 생략이 가능하다. 
int[] score = {50, 60, 70, 80, 90};

단 int[] score;
   score = { .... } 사용 불가능 하다. 

배열의 출력
for 문을 이용하여 Index 를 통해 값을 출력하거나 아니면,
Arrays.ToString : 이 메서드는 배열의 모든 요소를 [첫번째 요소, 두번째 요소,...] 와 같은 형식의 문자열을 만들어서 반환한다. 
이 메소드를 사용하기 위해서는 import java.util.* 를 추가해 줘야 한다. 

1.5 배열의 복사.
for 문을 통해 아니면 다른 방법을 통해 데이터 를 다 새로운 array에 다 옮기고 array naming (즉 참조변수)의 주소값을 변경해 준다. 
이때 기존의 array 를 참조하는 주소가 끊기게 되고, 이로 인해 dust file이 생긴다. 
JVM 은 이런 데이터를 자동으로 삭제 시켜 주며, 이러한 일을 garbege collection 이라 부른다. 

배열의 복소는 아래 방법을 추천한다. (배열은 순차적으로 저장되어 있기때문에)
"배열의 복사는 for문보다 System.arraycopy()를 사용한느 것이 효율적이다."


1.6 배열의 활용

2. String배열
2.1 String배열의 선언과 생성
String[] name = new String[3];
기본값은 null

2.2 String 배열의 초기화
String[] name = new String[3];
name[0] = "Kim";
name[1] = "Park";
name[2] = "Yi";

or

String[] name = new String[] {"Kim", "Park", "Yi"};
String[] name = {"Kim", "Park","Yi"};

String 배열은 객체가 아닌 객체의 주소가 저장되어 있는 참조 배열이다. 
정확한 표현은 String 은 클래스이므로
name[0] = new String("Kim"); 으로 표현해야 하지만, 간편히 위와 같이 표현이 가능하다. 
하지만 name 에 들어 있는 값은 kim이 아닌 kim 이 들어 있는 메모리 주소를 가지고 있다. 
즉 참조형 배열의 경우 배열에 저장되는 것은 객체의 주소이다. 

**** 향상된 for 문
for ( String str : names )
{}

String 클래스의 주요 메서드
char charAt(int index) 문자열에서 해당 위치 index에 있는 문자를 반환한다. 
int length()		문자열의 길이를 반환한다. 
String sbustring(int from, int to)	문자열에서 해당 범위(from ~ to)에 있는 문자열을 반환한다. ( from <=  x < to)
char[] toCharArray()		문자열을 문자배열(char[])로 변환해서 반환한다. 
boolean equals("문자")		문자가 같은지 확인한다. 

char 배열과 String클래스의 변환
char[] -> String, String -> char[]
char[] chArr = {'A','B','C'};
String str = new String(chArr);
char[] tmp = str.toCharArry();

2.4 커맨드 라인을 통해 입력받기
프로그램을 실행할 때 클래스이름 뒤에 공백문자로 구분하여 여러 개의 문자열을 프로그램에 전달 할 수 있다. 
java MainTest abc 123
main 함수의 인수 args[0]="abc", args[1]="123"

3. 다차원 배열
int[][] a = new int[4][3];
int[][] a = { {1,2,3},
		{4,6,6},
		{7,8,9} };

가변 배열
