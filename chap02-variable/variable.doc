* 변수 
1. 변수란 - 단 하나의 값을 저장할 수 있는 메모리 공간 
2. 변수의 초기화란 - 변수를 사용하기 전에 처음으로 값을 저장하는 것
3. 변수의 명명규칙
	3-1: 대문자가 구분되며 길이에 제한이 없다. 
	3-2: 예약어를 사용해서는 안된다. 
	3-3: 숫자로 시작해서는 안 된다. 
	3-4: 특수문자는 '_'와 '$'만을 허용한다.
  ## 자바 프로그래머들에게 권장하는 규칙
	3-a. 클래스 이름의 첫 글자는 항상 대문자로 한다. 
	3-b. 여러 단어로 이루어진 이름은 단어의 첫 글자를 대문자로 한다. 
	3-c. 상수의 이름은 모두 대문자로 한다. 여러 단어로 이루어진 경우 '_'로 구분한다. 




* 변수의 타입
	--- Data
	     |----- String(문자)
	     |----- Number(숫자)
			|--------- Integer(정수)
			|--------- Float(실수)

1. 기본형 & 참조형 - 기본형 변수는 값을 , 참조형 변수는 어떤 값이 저장되어 있는 메모리 주소를 값으로 갖는다. 
	- 기본형(primitive type) - 논리형(boolean), 문자형(char), 정수형(byte,short,int,long), 실수형 (float, double)
	- 참조형(reference type) - 객체의 주소를 저장한다. 8개의 기본형을 제외한 나머지 타입
2. 기본형 : 기본형에는 모두 8개의 타입/자료형이 있으며, 크게 논리형, 문자형, 정수형, 실수형으로 구분

	---------------------------------
	  1byte    2byte    4byte    8byte
  논리형  boolean
  문자형           char
  정수형   byte    short    int       long
  실수형                    float     double 

3. 상수와 리터럴 (constant & literal)
상수 - 변수와 마찬가지로 값을 저장할 수 있는 공간이지만, 변수와 달리 한번 값을 저장하면 다른 값으로 변경할 수 없다. (final keyword)사용		final int MAX_SPEED = 10;  ## 상수는 선언과 동시에 값을 설정해야 한다. 
리터럴 - 상수의 다른 이름이라 생각하자. 엄밀이 말한면, 상수는 저장공간을 뜻하며, 리터럴은 상수에 저장되는 값을 말한다. 

- 변수(variable) 하나의 값을 저장하기 위한 공간
- 상수(constant) 값을 한번만 저장할 수 있는 공간
- 리터럴(literal) 그 자체로 값을 의미하는 것

4. 형식화된 출력 - printf()
printf() 는 '지시자(specifier)'를 통해 변수의 값을 여러 가지 형식으로 변환하여 출력한ㄴ 기능을 가지고 있다. (printf()문은 줄바꿈 안함++ %n사용)
	System.out.printf ( "age: %d" , age);
	System.out.printf ( "age: $d", 14);
	System.out.printf ( "age:14" )

	지시자specifier
	%b	: boolean 출력
	%d	: 10진 정수 출력
	%o	: 8진 정수 출력
	%x , %X : 16진 정수 출력
	%f	: 부동 소수점의 형식으로 출력
	%e , %E : 지수(exponent) 표현식으로 출력
	%c	: 문자 출력
	%s	: 문자열로 출력

* 화면에서 입력 답기 - Scanner
- JDK 1.6 부터 추가된 Console 클래스를 이용하는 것이 간단한데, 이 클래스는 이클립스나 IDE 환경에서 잘 안됨. 이에 Scanner class 사용
  Scanner Class 는 java.util.* 에서 가져와 사용한다. 
  : import java.util.*

1. Scanner 이용하여 입력 받기
1-1. import java.util.*;   # Scanner class를 사용하기 위해 추가
1-2. Scanner scanner = new Scanner(System.in);   ## Scanner class 객체를 생성한다. 
1-3. String input = scanner.nextLine();   ### nextLine()이라는 메소드를 호출하면, 입력대기 상태에 있다가 입력을 마치고 '엔터'를 누르면 입력한 내용이 문자열로 반환된다. 
int num = Integer.parseInt(input);   ### 입력받은 내용을  int타입의 값으로 변환. 

* 기본형 (primitive type)

1. 논리형 - boolean - 1byte  ( 원래는 1비트만 필요하지만, java 에서는 데이터를 다루는 최소단휘가 byte이기 때문에 1byte)
  : boolean 의 값은 true or false 이며, default 값은 false이다. 

2. 문자형 - char  - 2byte (65536개)
  : char type은 단 하나의 문자만을 저장한다  (' ' 싱글 쿼테이션 사용)
  - 특수 문자 다루기
    tab 	:  \t
    backspace	:  \b
    form feed	:  \f
    new line	:  \n
    carriage return: \r
    역스랠쉬    :  \\
    작은 따옴표 :  \'
    큰 따옴표   :  \"
    유니코드(16진수) 문자 :   \u

  - 인코딩 디코딩 (encoding & decoding)  : encoding - ~ 을 코드화하다 혹은 암호화하다.
	A --> 65 인코딩 ,   65 --> A 디코딩

  - 아스키 (ASCII) - American Standard Code for Information Interchange
	아스키는 128개의 문자 집합을 제공하는 7bit 부호로, 처음 32개의 문자는 인쇄와 전송 제어용으로 사용되는 '제어문자'로 출력할 수 없고 마지막 문자(DEL)을 제외한 33번째 이후의 문자들은 출력할 수 있는 문자들로 , 기호와 숫자, 영대소문자로 이루어져 있다. 

  - 확장 아스키(Extended ASCII)와 한글(CP 949)
	일반적으로 데이터는 byte 단위로 다뤄지는데 아스키는 7bit 이므로 1bit 남는다. 이 남은 공간을 활용해서 문자를 추가로 정의한 것이 '확장 아스키'이다.  확장 아스키에 추가된 128개의 문자는 여러 국가와 기업에서 서로의 필요에 따라 다르게 정의해서 사용한다.

  - 코드 페이지 (Code Page : cp)
	IBM에서 PC를 사용하는 지역이나 국가에 여러 버젼의 '확장 아스키'가 필요했고, 이에 코드 페이지를 만들고 이름을 붙임
	IBM은 MS와 같은 업체들과 혈력하여 코드페이지 만들어 내고 공유 이에 한글 윈도우는 cp 949, 영문 윈도우는 cp 437을 사용

  - 유니코드 (java의 경우 UTF-16  2byte 문자 셋을 사용)
	전 세계의 모든 문자를 하나의 통일된 문자집합으로 표현하고자 노력하였고 그 결과가 바로 유니코드이다. 

3. 정수형 - byte, short, int , long  (default int)
	     1   <  2   < 4  <  8
  - 정수형의 표현형식과 범위
	|S|    n-1 bit |
	S: 부호 비트 (양수는 0, 음수는 1)
	n: 타입의 크기 단위(bit)
  - 정수형의 오버플로우 : 해당 타입이 표현할 수 있는 값의 범위를 넘어서는 것을 오버플로우라고 한다.
  - 부호있는 정수의 오버플로우 : 부호있는 정수는 부호비트가 0에서 1이 될 때 오버플로우가 발생한다. 

4. 실수형 - float, double
             4    <   8
   - 표현형식
	정수형 :   |s|       31 bit      |  (int)   약 +- 2 * 10e9
	실수형 :   |s|  E(8)  |   M(23)  |  (float) 약 +- 3.4 * 10e38   , +- M * 2E ( 2의 제곱을 곱한 형태로 저장)
	실수형이 더 큰 숫자를 표현할 수 있는 이유는 표현형식이 다르기 때문이다 

5. 형변환(casting) - 변수 또는 상수의 타입을 다른 타입으로 변환하는 것
	** casting 시 사이즈가 작은 쪽으로 casting 할경우, 저장공간의 부족으로 값 손실이 발행하기도 한다. 조심.
5-1 (type) 피연산자 
	double d = 85.4
	int score = (int)d
	
	- 기존형에서 boolean을 제외한 나머지 타입들은 서로 형변환이 가능 그리고 기본형과 참조형간의 형변환은 불가능
		int -> char  , char -> int , float -> int , int->float
	***
		blooean을 제외한 나머지 7개의 기본형은 서로 형변환이 가능하다. ( 작은 공간의 형변환은 데이터 손실이 발생할 수 있다.)
		기본형과 참조형은 서로 형변환 할 수 없다. 
		서로 다른 타입의 변수간의 연산은 형변환을 하는 것이 원칙이지만, 값의 범위가 작은 타입에서 큰 타입으로의 형변환은 생략할 수 있다. 	
