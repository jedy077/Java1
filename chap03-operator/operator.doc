1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환
 byte + short -> int + int -> int
cahr + short -> int + int -> int 1. 연산자 (operator)

1.1 연산자와 피연산자
연산자(operator) 연산을 수행하는 기호 (+-*/)
피연산자(operand) 연산자의 작업 대상(변수, 상수, 리터럴, 수식)

1.2 식(expression) 과 대입연산자
expression : 계산하고자 하는 바를 표현한 것
evaluation : expression을 이용하여 결과를 얻는 것.

1.3 연산자의 종류
산술연산자 : + - * / % << >>
비교연산자 : > < >= <= == !=
논리연산자 : && || ! &  |  ^  ~
대입연산자 :  =
기타       : (type) ?: instanceof

1.5 산술 변환 (usual arithmetic conversion)
이항 연산자는 두 피연산자의 타입이 일치해야 ㅎ연산이 가능하므로, 피연산자의 타입이 서로 다르다면 연산 전에 형변환 연산자로 타입을 일치시켜야한다.
피연산자 타입의 일치를 위해 형변환이 되는것을 산술 변환이라 한다. 

산술변환 규칙
두 피연산자의 타입을 같에 일치시킨다(보다 큰 타입으로 일치)
long + int -> long   + long -> long
float + int -> float + float -> float
double + float -> double + double -> double

피연산자의 타입이 int 보다 작은 타입이면 int로 변환 (why: 그 이유는 cpu가 처리하는 데이터의 단위에 영향을 받는다.)
 byte + short -> int + int -> int
cahr + short -> int + int -> int 

2. 단한 연산자
2.1 증감 연산자 ++ --
피연산자의 값을 ++ 1개 증가 -- 1개 감소 시킨다. 
증감 연산자가 피연산자의 앞에오면, 바로 증가/감소  , 뒤에 오면 계산 후 행이 바뀔때 증가/감소

2.2 부호연산자(+ - )
2.3 산술연산자( + - * /)
3.2 나머지 연산자 (%)

4. 비교 연산자 ( < > <= >= == !=)
* 문자열을 비교 할때는 equals() 함수를 사용하자. (비교 연산자 두문자열이 같은지만 비교할 뿐이지.. 내용이 정확히 같은지 알 수 없다)

5. 논리 연산자 ( -  && || ! )
|| 피연산자 중 한쪽만 Ture 이면 결과는 True
&& 피연산자 모두 True이어야 결과가 True

5.2 비트 연산자 ( & | ^ ~ << >> )
|   :  피연산자 중 한 쪽의 값이 1이면, 1을 결과로 얻는다 , 그 외에는 0을 얻는다. 
&   : 피연산자 양 쪽이 모두 1이어야만 1의 결과를 얻는다. 그 외에는 0을 얻는다. 
^   : 피연산자 양 쪽이 다를 때만 1의 결과를 얻는다. 같은 경우에는 0을 얻는다. 
~   : 비트 전환 연산자 0은 1로 1은 0으로 
<<  : x << n 은 x*2n승의 경과와 같다. 
>>  : x >> n 은 x / 2n승의 결과와 같다. 

6. 그 외 연산자 
6.1 조건 연산자 ? :
조건식 ? 식1 : 식2

