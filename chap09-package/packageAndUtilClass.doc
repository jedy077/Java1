1. java.lang 패키지
java.lang 패키지는 기본이 되는 패키지, 그래서 Import 문이 필요가 없다. 

1.1 Object클래스
최고 조상 클래스

protected Object clone()	객체 자신의 복사본을 만든다.
public boolean equals(Object obj)	객체 자신과 객체 obj가 같은 객체인지 알려 준다. (같은면 true)
protected void finalize()	객체가 소멸될 때 가비지 컬렉터에 의해 자동적으로 호출된다. 이 때 수행되어야 하는 콛가 있을 때 오버라이딩한다. 
public Class getClass()	객체 자신의 클래스 정보를 담고 있는 Class인스턴스를 반환한다. 
public int hashCode()		객체 자자신의 해시코드를 반환한다. 
public String toString()	객체 ㅔ자신의 정보를 문자열로 반환한다. 
public void notify()		객체 자신을 사용라려고 기다리는 쓰레드를 하나만 깨운다. 
public void notifyAll()		객체 자신을 사용라려고 기다리는 모든 쓰레드를 깨운다.
public void wait()		다른쓰레드가 notify() , notifyAll()을 호출할 때까지 현재 쓰레드를 무한히 또는 지정된 시간동안 기다리게 한다.  public void wait(long timeout), 	public void wait(long timeout, int nanos)


equals(Object obj)
매개변수로 객체의 참조변수를 받아서 비교하여 그 결과를 boolean값으로 알려 주는 역할을 한다. 
Object클래스로부터 상속받은 equals메서드는 결국 두 개의 참조변수가 같은 책체를 참조하고 있는지, 즉 두 참조변수에 저장된 값(주소값)이 같은지를 판단하는 기능밖에 할 수 없다는 것을 알 수 있다. 

hashCode()
해싱 기법에 사용되는 '해시함수'를 구현한 것이다. 
해싱은 데이터관리기법 중의 하나인데 다량의 데이터를 저장하고 검색하는 데 유용하다. 
해시함수는 찾고자하는 값을 입력하면, 그 값이 저장된 위치를 알려주는 해시코드를 반환한다. 

toString()
이 메서드는 인스턴스에 대한 정보를 문자열로 제공할 목적으로 정의된 것이다. 
public String toString(){
	return getClass().getName()+"@"+Integer.toHexString(hashCode());
}

clone()
이 메서드는 자신을 복제하여 새로운 인ㅅ턴스를 생성하는 일을 한다. (clone() 은 Interface 즉 Cloneable을 구현해야 한다. )
어떤 인스턴스에 대해 작업을 할 때, 원래의 인스턴스를 보존하고 clone메서드를 이용해서 새로운 인스턴스를 생성하여 작업을 하면 작업이전의 값이 보전되므로 작업에 실패해서 원래의 상태로 되돌리거나 변경도지 전의 값을 참고하는데 도움이 될 것이다. 
Object클래스에 정의된 clone()은 단순히 인스턴스변수의 값만 복사하기 때문에 참조타입의 인스턴스 변수가 있는 클래스는 완전한 인스턴스 복제가 이루어지지 않는다.  배열의 경우 참조변수 이므로, 참조 변수의 경우 원래의 인스턴스에 영향을 미치게 된다. 
이럴 경우는 clone 메서드를 오버라이딩해서 새로운 배열을 생성하고 배열의 내용을 복사하도록 해야 한다. 

clone 을 사용하려면, 먼저 복제할 클래스가 Cloneable인터페이스를 구현해야 하고 , clone()을 오버라이딩하면서 접근 제어자를 Portected에서 public 으로 변경해야 한다. 

getClass()
이 메서드는 자신이 속한 클래스의 Class객체를 반환하는 메서드인데, Class객체는 이름이 "Class"인 클래스의 객체이다.  (동적인 코드 작성에 좋음) 
public final class Class implements ... {... .}

Class 객체를 얻는 방법
Class cObj = new Card().getClass();  // 생성된 객체로 부터 얻는 방법
Class cObj = Card.class;		//클래스 리터럴(*.class) 로 부터 얻는 방법
Class cObj = Class.forName("Card");	// 클래스 이름으로 부터 얻는 방법


Card c = new Card();		// New 연산자를 이용해서 객체를 생성하는 방법이며
Card c = Card.class.newInstance();	// Class객체를 이용해서 객체 생성 ( newInstance()의 경우 예외처리가 필수 조건이다)

* 동적으로 객체를 생성하고 메서드를 호출하는 방법에 대해 더 알고 싶다면 "리플렉션 API(reflection API'로 검색하면 된다. 

1.2 String 클래스
java 에서는 문자열을 다루기 위한 특별한 class - String class 를 제공한다. 
String class는 문자열을 저장하고, 다루기 위한 함수를 제공한다. 

변경 불가능한(immutable) 클래스
public final class String implements java.io.Serializable, comparable {
	private char[] value;
	...
}

문자열 비교
문자열을 만들 때는 두가지 방법이 존재 ( 문자열 리터럴을 지정하는 방법과 , String클래스의 생성자를 이용해서 만드는 방법)
String str1 = "abc" ;  // 문자열 리터럴 "abc"의 주소가 str1에 저장됨.
String str2 = "abc" ; // 문자열 리터럴 "abc"의 주소가 str2에 저장됨.
String str3 = new String("abc"); // 새로운 String instance를 생성
String str4 = new String("abc"); // 새로운 String instance를 생성
문자열 리터럴은 이미 존재하는 것을 재사용하는 것이며 , New 생성자는 instance를 새로 메모리에 만들어 주는 역할을 한다. 

equals() 를 사용하면 두 문자열의 내용을 비굑하기 때문에 리터럴과 new 모두 true로 나타낸다. 
그러나 String instance의 주소를 등가비교연산자 '=='로 비교했을 때는 결과가 다르다. 

문자열 리터럴
자소 소스파일에 포함된 모든 문자열 리터럴은 컴파일 시에 클래스 파일에 저장된다. 이 때 같은 내용의 문자열 리터럴은 한번만 저장된다. 
문자열 리터럴도 String instance이고 한번 생성하면 내용을 변경할 수 없으니 하나의 인스턴스를 공유하면 되기 때문이다. 

빈 문자열(empty string)

String 클래스의 생성자와 메서드
String(String s) : 주어진 문자열(s)를 갖는 String 인스턴스를 생성한다. --> String s = new String("Hello") --> S = "Hello"
String(char[] value) : 주어진 문자열(value)을 갖는 String 인스턴스를 생성
	char[] c = { 'H', 'e', 'l','l','o' };
	String s = new String(c);
	--> s = "Hello"
String (StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String인스턴스를 생성한다. 
	StringBuffer sb = new StringBuffer("Hello");
	String s = new String(sb);
	--> s = "Hello"
char charAt(int index) : 지정된 위치(index)에 있는 문자를 알려준다. (index 는 0 부터이다.)
	String s = "Hello";
	String n = "0123456";
	char c = s.charAt(1); // c = 'e'
	char c2 = n.charAt(1); // c2 = '1'
int compareTo(String str) : 문자열(str)과 사전순서로 비교한다, 같으면 0을, 사전순으로 이전이므녀 음수를 , 이후면 양수를 반환
	int i = "aaa".compareTo("aaa"); // i = 0
	int i2 = "aaa".compareTo("bbb"); // i2= -1
	int i3 = "bbb".compareTo("aaa"); // i3 = 1

String concat (String str) :  문자열(str)을 뒤에 덧붙인다. 
	String s = "Hello";
	String s2 = s.concat(" World!"); // s2 = "Hello World!"

boolean contains(charSequence s) : 지정된 문자열(s)이 포함되었는지 검사한다. 
	String s = "abcdefg";
	boolean b = s.contains("bc");   // b = true

boolean endsWith(String suffix) : 지정된 문자열(suffix)로 끝나는지 검사한다. 
	String file = "Hello.txt";
	boolean b = file.endsWith("txt") ; // b = true
boolean equals ( Object obj) : 매개변수로 받은 문자열 (obj)과 String 인스턴스의 문자열을 비교한다 obj가 String이 아니거나 문자열이 다르면 false를 반환한다. 
	String s = "Hello";
	boolean b = s.equals("Hello");
	boolean b2 = s.equals("hello");

boolean equalsIgnoreCase(String str) : 문자열과 String 인스턴스의 문자열을 대소문자 구분없이 비교한다. 
	String s = "Hello"
	boolean b = s.equalsIgnoreCase("HELLO");
	boolean b2 = s.equalsIgnoreCase("hello");

int indexOf(char ch) : 주어진 문자(ch) 가 문자열에 존재하는지 확인하여 (index)를 알려준다. 못찾으면 -1
	String s = "Hello";
	boolean b = s.indexOf('o');
	boolean b2 = s.indexOf('k');

int indexOf(char ch, int pos) : 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(Pos)부터 확인하여 위치(index)를 알려준다. 못찾으면 -1
	String s = "Hello";
	int idx1 = s.indexOf('e', 0);
	int idx2 = s.indexOf('e',2);

int indexOf(String str) : 주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없으면 -1
	String s = "ABCDEFG";
	int idx = s.indexOf("CD");

String intern() : 문자열 상수풀(constant pool) 에 등록한다. 이미 상수풀에 같은 내용의 문자열이 있을 경우 , 그문자열의 주소값을 반환한다		String s = new String ("abc");
	String s2 = new String("abc");
	boolean b = (s==s2);
	boolean b2 = s.equals(s2);
	boolean b3 = (s.intern() == s2.intern());

int lastIndexOf(char ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝부터 찾아서 위치(index)를 알려 준다. 못찾으면 -1
	String s = "java.lang.Object";
	int idx1 = s.lastIndexOf('.') //
	int idx2 = s.indexOf('.');

int length() : 문자열의 길이를 알려준다. 

String replace ( char old, char nw) : 문자열 중 문자(Old)를 새로운 문자(Nw)로 바꾼 문자열을 반환한다. ㅏ
	String s = "Hello";
	String s1 = s.replace ('H','C');
String replace ( CharSequence old, CharSequence nw) : 문자열 중의 문자열(old)를 새로운 문자열(nw)로 모두 바꾼 문자열을 반환한다. 
	String s = "Hellollo";
	String s1 = s.replace("ll","LL");
String replaceAll(String regex, String replacement) : 문자열 중에서 지정된 문자열(regex)과 일치한 것을 새로운 문자열(replacement)로 모두 변경한다. 
	String ab = "AABBAABB"
	String r = ab.replaceAll("BB","bb");

String replaceFirst(String regex, String replacement) : 문자열 중에서 지정된 문자열(Regex)과 일치 하는 것중, 첫 번째 것만 새로운 만주열로 변경한다. 
	String ab = "AABBAABB";
	String r = ab.replaceFirst("BB","bb");
String[] split(String regex) : 문자열을 지정된 분리자(regex) 로 나누어 무자열배열에 담아 반환한다.
	String animal = "dog,cat,bear";
	String[] arr = animal.split(",");
String[] split(String regex, int limit) : 문자열을 지정된 분리자로 나누어 문자열배열에 담아 반환한다. 단 문자열 전체를 지정된 수로 자른다. 
	String animal = "dog,cat,bear";
	String[] arr = animal.split(",", 2);

boolean startsWith(String prefix) : 주언진 문자열로 시작하는지 검사한다. 
	String s = "java.lang.Object";
	boolean b = s.startsWith("java");
	boolean b2 = s.startsWith("lang");

String substring(int begin), String substring(int begin, int end)  : 주어진 시작위치부터 끝 위치 범위에 포함된 문자열을 얻는다. 이때 시작위치의 문자는 포함되지만, 끝 위치의 문자는 포함되지 않는다. 
	String s = "java.lang.Object";
	String c = s.substring(10);
	String p = s.substring(5,9);

String toLowerCase() : 소문자로 반환
String toString () : 인스턴스에 지정된 문자열을 반환한다. 
String toUpperCase() : 대문자로 반환
String trim() : 문자열의 왼쪽 끝과 오른쪽 끝에 있는 공백을 업앤 견과를 반환한다. 
static String valueOf(boolean b)
static String valueOf(cahr c)
static String valueOf(int i)
static String valueOf(long l)
static String vlaueOf(float f)
static String valueOf(double d)
static String valueOf(Object o) 
지지어된 값을 문자열로 변환하여 반홚나다. 참조변수의 경우, toString()을 호출한 결과를 반환한다. 

join() 과 StringJoiner
join()은 여러 문자열 사이에 구분자를 넣어서 결합한다. 
String animals = "dog,cat,bear";
String[] arr = animals.split(",");
String str = String.join("-",arr);
System.out.println(str);

java.util.StringJoiner클래스를 사용해서 문자열을 결합할 수도 있다. 
StringJoiner sj = new StringJoiner(",","[","]");
String[] strArr = { "aaa", "bbb", "ccc" };
for(String s : strArr )
	sj.add(s.toUpperCase());
System.out.println(sj.toString());

유니코드의 보충문자. 
유니코드는 원래 2byte 16bit 문자 체계, 그러나 지금은 20bit 로 확장되었다. 이에 char로는 감당이 아니되 int를 사용 즉 int ch가 됨

문자 인코딩 변환
getBytes(String charsetName)을 사용하면, 문자열의 문자 인코딩을 다른 인코딩으로 변경할 수 잇다. 
Java 는 UTF-16을 사용하지만, 문자열 리터럴에 포함되는 문자들은 OS 인코딩을 사용한다. 
그래서 한글 윈도우즈 인경우 문자 인코딩으로 CP949를 사용된다. 이것을 UTF-8로 변경하려면
byte[] utf8_str = "가".getBytes("UTF-8");
String str = new String(utf8_str, "UTF-8");

String.format()
format()은 형식화된 문자열을 만들어내는 간단한 방법이다. printf()하고 사용법이 완전히 똑같으므로 사용하는데 별 어려움은 없을 것이다. 
String str = String.format("%d 더하기 %d는 %d입니다",3,5,3+5);
System.out.println(str);

기본형 값을 String으로 변환 +"" 하던가 아니면 String.valueOf(i) 하던가 !!

String 을 기본형 값으로 valueOf를 쓰거나 parseInt()를 사용
int i = Integer.parseInt("100");
int i2 = Integer.valueOf("100");


1.3 StringBuffer 클래스와 StringBuilder 클래스
String 클래스는 인스턴스를 생성할 때 지정된 문자열을 변경할 수 없지만, StringBuffer클래스는 변경이 가능하다. 
내부적으로 문자열 편집을 위한 Buffer를 가지고 있으며, StringBuffer인스턴스를 생성할 때 그 크기를 지정할 수 있다. 
이 때, 편집할 문자열의 길이를 고려하여 버퍼의 길이를 충분히 잡아주는 것이 좋다. 

StringBuffer의 생성자
StringBuffer 클래스의 인스턴스를 생성할 때, 적절한 길이의 char형 배열이 생성되고, 이 배열은 문자열을 저장하고 편집하기 위한 Buffer로 사용된다. 

StringBuffer인스턴스를 생성할 때는 생성자 StringBuffer(int length)를 사용해서 StringBuffer인스턴스에 저장될 문자열의 길이를 고려하여 충분히 여유있는 크기로 지정하는 것이 좋다. default 크기는 16개 문자를 저장할 수 있는 크기의 buffer를 생성한다. 
public StringBuffer(int length) {
	value = new char[length];
	shared = false;
}

public StringBuffer() {
	this(16);
}

public StringBuffer(String str) {
	this(str.length() + 16);
	append(str);
}

StringBuffer변경
StringBuffer sb = new StringBuffer("abc");
*** append() 의 반환 타입은 StringBuffer인데 자신의 주소를 반환한다. 

StringBuffer 비교
String인스턴스 간에 비교와는 달리: String instance 에서 == 는 참조 변수가 가지고 있는 값을 비교(String instance의 주소) 그리고 equals는 참조변수가 가르키는 값을 비교하지만,,,

StringBuffer instance는 == 와 equals() 모두 참조 변수가 가지고 있는 값(주소)를 나타낸다. 
값을 비교하기 위해서는 toString() 으로 값을 불러와 비교 한다. (toString은 은 overiding 되어 있어서 String을 반환한다. )

StringBuffer 클래스의 생성자와 메서드
StringBuffer()	:16문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성한다. 
StringBuffer sb = new StringBuffer();

StringBuffer(int length) : 지정된 개수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성한다. 
StringBuffer sb = new StringBuffer(10);

StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 StringBuffer 인스턴스를 생성한다. 
StringBuffer sb = new StringBuffer("hi");

StringBuffer append(boolean b)
StringBuffer append(char c)
StringBuffer append(char[] str)
StringBuffer append(double d);
Stringbuffer append(float f)
StringBuffer append(int i)
StringBuffer append(long l)
StringBuffer append(Object obj)
StringBuffer append(String str)
매개변수로 입력된 값을 문자열로 변환하여 StringBuffer 인스턴스가 저장하고 있는 문자열의 뒤에 덧붙인다. 

int capacity() : Stringbuffer인스턴스의 버퍼크기를 알려준다. length()는 버퍼에 담긴 문자열의 길이를 알려준다. 

char chatAt(int index) : 지정된 위치(index)에 있는 문자열을 반환한다. 

StringBuffer delete(int start, int end) : 시작위치부터 끝 위치 사이에 있는 모든 문자를 제거한다. 끝 위치 문자 제외

StringBuffer deleteCharAt(int index) : 지정된 위치의 문자를 제거한다. 

StringBuffer insert(int pos, boolean b)
StringBuffer insert(int pos, char c)
StringBuffer insert(int pos, char[] str)
StringBuffer insert(int pos, double d)
StringBuffer insert(int pos, float f)
StringBuffer insert(int pos, int i)
StringBuffer insert(int pos, long l)
StringBuffer insert(int pos, Object obj)
StringBuffer insert(int pos, String str)
두 번째 매개변수로 받은 값을 문자열로 변환하여 지정된 위치에 추가한다. 

int length() 
StringBuffer인스턴스에 저장되어 있는 문자열의 길이를 반환한다. 

StringBuffer replace(int start, int end, String str)
지정된 범위의 문자들을 주어진 문자열로 바꾼다. end 는 포함안됨

StringBuffer reverse()
StringBuffer인스턴스에 저장되어 있는 문자열의 순서를 거꾸로 나열한다. 

void setCharAt(int index, char ch)
지정된 위치의 문자를 주어진 문자로 바꾼다. 

void setLength(int newLength)
지정된 길이로 문자열의 길이를 변경한다. 

String toStirng() : StringBuffer인스턴스의 문자열을 String으로 반환
String substirng(int start) 
String substring(int start, int end)


StringBuilder란 ?
StringBuffer 는 멀티쓰레드에 안전(Thread safe) 하도록 동기화되어 있다. 동기화는 Stringbuffer의 성능을 떨어뜨린다. 
그래서 StringBuffer에서 쓰레드의 동기화만 뺀 StringBuilder가 새로 추가되었다. 

1.4 Math 클래스

올림, 버림, 반올림
round() : 소수 첫 자리 반올림
ceil() : 소수 첫 자리  올림
floor() :소수 첫 자리  버림
rint() : 소수 첫 자리 반올림 vs round() rint는 double 로 반환.

예외를 발생시키는 메서드
메서드 이름에 "Exact"가 포함된 메서들들이 JDK1.8부터 새로 추가되었다. 
이들은 정수형 간의 연산에서 발생할 수 있는 오버플로우(overflow)를 감지하기 위한 것이다. 
int addExact(int x, int y)
int subtractExact(int x , int y)
int multiplyExact(int x, int y);
int incrementExact (int a);
int decrementExact (int a)
int negateExact (int a)
int toInExact(long value)
위의 연산자들은 overflow 발생시 예외(ArithmeticException) 발생

삼각함수로 지수, 로그
import static java.lang.Math.*;
import static java.lang.System.*;

class MathEx3{
	public static void main(String arg[]){
		int x1=1, y1=1;
		int x2=2, y2=2;

		double c = sqrt(pow(x2-x1,2) + pow(y2-y1,2));
		double a = c * sin(PI/4);
		double b = c * cos(PI/4);
	//	double b = c * cos(toRadians(45));
		out.printf ( "a = %f%n", a);
		out.printf ( "b = %f%n", b);
		out.printf ( "c = %f%n", c);
		out.printf("angle=%f rad%n " , atan2(a,b));
		out.printf("angle=%f degree%n%n", atan2(a,b) * 180 / PI);
//		out.printf("angle=%f degree%n%n", toDegrees(atan2(a,b)));
		out.printf ("24 * log10(2) = %f %n", 24 * log10(2));
		out.printf ("53 * log10(2) = %f %n%n", 53 * log10(2));		
	}
}

StrictMath 클래스
Math 클래스는 최대한의 성능을 얻기 위해 JVM이 설치된 OS의 메서드를 호출해서 사용한다. 즉 OS에 의존적인 계산이란 뜻은 컴퓨터 마다 결과가 조금씩 다를 수 있다. 소수점 경우 예.

어디에서 실행해도 똑같은 결과를 나타내도록 StrictMath 클래스를 새로 작성하였다. ( 성능은 좀 떨어지더라고 결과가 중요)

1.5 래퍼(wrapper)클래스
boolean		Boolean		Boolean(boolean value)		Boolean b = new Boolean(true);
				Boolean(String s)		Boolean b2 = new Boolean("true");

char		Character	Character(char value)		Character c = new Character('a');

byte		Byte		Byte(byte value)		Byte b = new Byte(10);
				Byte(String s)			Byte b2 = new Byte("10");

short		Short		Short(short value)		Short s = new Short(10);
				Short(String s)			Short s2 = new Short("10");

int		Integer		Integer(int value)		Integer i = new Integer(100);
				Integer(String s)		Integer i2 = new Integer("100");

long		Long		Long(long value)		Long l = new Long(100);
				Long(String s)			Long l2 = new Long("100");

float		Float		Float(double value)		Float f = new Float(1.0);
				Float(float value)		Float f2 = new Float(1.0f);
				Float(String s)			Float f3 = new Float("1.0f");

double		Double		Double(double value)		Double d = new Double(1.0);
				Double(String s)		Double d2 = new Double("1.0");

Number Class
Byte Short Int Long Float Double BigInteger BigDecimal

문자열을 숫자로 변환하기
int i = new Integer("100").intValue();// floatValue(), longValue()...
int i2 = Integer.parseInt("100");
Integer i3 = Integer.valueOf("100")

문자열 -> 기본형
byte	b = Byte.parseByte("100");
short	s = Short.parseShort("100");
int	i = Integer.parseInt("100");
long	l = Long.parseLong("100");
float	f = Float.parseFloat("3.14");
double	d = Double.parseDouble("3.14");

문자열 -> 래퍼클래스
Byte	b = Byte.valueOf("100");
Short	s = Short.valueOf("100");
Integer i = Integer.valueOf("100");
Long	l = Long.valueOf("100");
Float	f = Float.valueOf("3.14");
Double	d = Double.valueOf("3.14");

JDK1.5 	부터 autoboxing 기능 때문에 기ㅎ본형일 때와 래퍼 클래스일 때의 차이가 없어졌음. 그냥 구별없이 사용 가능 단 성은은 valueOf()가 떨어짐.

오토박싱 & 언박싱(autoboxing & unboxing)


2. 유용한 클래스
2.1 java.util.Objects클래스
Object 클래스의 보조 클래스로 Math클래스처럼 모든 메서드가 "static"이다. 객체의 비교나 널 체크(null check)에 유용하다.

isNull(), nonNull()
static boolean isNull(Object obj)
static boolean nonNull(Object obj)

requireNonNull()은 객체가 널이 아니어야 하는 경우 사용. 만일 객체가 널이면, NullPointerException을 발생.
static <T> T requireNonNull(T obj)
static <T> T requireNonNull(T obj, String message)
static <T> T requireNonNull(T obj, Supplier<String> messageSupplier>

compare() : 같으면 0 , 크면 양수, 작으면 음수
static int compare (Object a, Object b , Comparator c)

equals()  --> 기본적인 equals()와의 차이점은 기존은 null 을 체크해야 하지만 Objects.equals()는 null 체크를 자동으로 다해 준다. 
static boolean equals(Object a, Object b)

deepEquals(Object a , Object b)  --> 다차원 배열 을 비교할 때 효율 적이다

toString()

hashCode()

2.2 java.util.Random 클래스
double randNum = Math.random();
double ranNum = new Random().nextDouble(); // 위의 문장과 동일

int num = (int)(Math.random() *6) +1;
int num = new Random(().nextInt(6) + 1; //

Random클래스의 생성자와 메서드
생성자 Random()은 아래와 같은 종자값을 System.currnetTieMillis()로 하기 때문에 실행할 때마다 얻는 난수가 달라진다. 
public Random() {
	this(System.currentTimeMillis());
}



toString()

hashCode()

2.2 java.util.Random 클래스
double randNum = Math.random();
double ranNum = new Random().nextDouble(); // 위의 문장과 동일

int num = (int)(Math.random() *6) +1;
int num = new Random(().nextInt(6) + 1; //

Random클래스의 생성자와 메서드
생성자 Random()은 아래와 같은 종자값을 System.currnetTieMillis()로 하기 때문에 실행할 때마다 얻는 난수가 달라진다. 
public Random() {
	this(System.currentTimeMillis());
}

toString()

hashCode()

2.2 java.util.Random 클래스
double randNum = Math.random();
double ranNum = new Random().nextDouble(); // 위의 문장과 동일

int num = (int)(Math.random() *6) +1;
int num = new Random(().nextInt(6) + 1; //

Random클래스의 생성자와 메서드
생성자 Random()은 아래와 같은 종자값을 System.currnetTieMillis()로 하기 때문에 실행할 때마다 얻는 난수가 달라진다. 
public Random() {
	this(System.currentTimeMillis());
}

2.3 정규식(Regular Expression) - java.util.regex 패키지
정규식이란 텍스트 데이터 중에서 원하는 조건과 일치하는 문자열을 찾아 내기 위해 사용하는 것으로 미리 정의된 기호와 문자를 이용해서 작성한 문자열을 말한다. 

1. 정규식을 매개변수로 Pattern 클래스의 static 메서드인 Pattern compile(String regex)을 호출하여 Pattern 인스턴스를 얻는다. 
2. 정규식으로 비교할 대상을 매개변수로 Pattern클래스의 Matcher matcher(CharSequence inpu) 을 호출해서 Matcher인스턴스를 얻는다. 
3. Matcher인스턴스에 boolean matches()를 호출해서 정규식에 부합하는지 확인한다. 


----
1. 문자열 source 에서 "broken"을 m.find()로 찾은 후 처음으로 m.appendReplacement(sb, "drunken"); 가 호출되면 source의 시작부터 "broken"을 찾은 위치까지으 내용에 "drunken"을 더해서 저장한다. 
2. m.find()는 첫 번째 발견된 위치의 끝에서부터 다시 검색을 시작하여 두 번째 "broken"을 찾게 된다. 다시 m.appendReplacement(sb, "drunekn")가 호출
3. m.appendTail(sb);이 호출되면 마지막으로 치환된 이후의 부분을 sb에 덧붙인다. 

2.4 java.util.Scanner 클래스
Scanner는 화면, 파일, 문자열과 같은 입력소스로부터 문자데이터를 읽어오는데 도움을 줄 목적으로 JDK1.5부터 추가되었다 
Scanner에는 다음과 같은 생성자를 지원하기 때문에 다양한 입력소스로부터 데이터를 읽을 수 있다. 

Scanner(String source)
Scanner(File source)
Scanner(InputStream source)
Scanner(Readable source)
Scanner(ReadableByteChannel source)
Scanner(Path source)

또한 Scanner는 정규식 표현을 이용한 라인단위의 검색을 지원하며 구분자에도 정규식 표현을 사용할 수 있어서 복잡한 형태의 구분자도 처리가 가능하다. 
Scanner useDelimiter(Pattern pattern)
Scanner useDelimiter(String pattern)

JDK 1.6 부터 console 도 이용 가능 . scanner and console 동일 

1.5 이전
BufferedReader br = new BufferedReader ( new InputStreamReader (System.in));
String input = br.readLine()

JDK 1.5 이후 (java.util.Scanner)
Scanner s = new Scanner(System.in));
String input = s.nextLine();

JDK1.6 이후 (java.io.console)
Console console = System.console();
String input = console.readLine();

입력받을 값이 숫자라면 nextLine() 대신 nextInt(), nextLong



2.5 java.util.StringTokenizer 클래스
StringTokenizer 는 긴 문자열을 지정된 구분자(delimiter)를 기준으로 토큰이라는 여러 개의 문자열로 잘라내는 데사용된다. 
StringTokenizer 를 이용하는 방법 이외에도 String.split 이나 Scanner의 useDelimiter(String patter)을 사용할 수 도 있다. 
String[] result = "100,200,300,400,500".split(",");
Scanner sc2 = new Scanner("100,200,300,400,500".useDelimiter(","));
위으 2방식은 정규식 표현을 사용 - 복잡한 형태의 구분자로 사용할 경우 적합

StringTokenizer 의 생성자와 메서드
StringTokenizer(String str, String delim)		문자열을 지정된 구분자로 나누는 StringTokenizer를 생성한다. 
StringTokenizer(String str, String delim, boolean returnDelims)		문자열을 지정된 구분자로 나누는 String Tokenizer을 생성한다. returnDelims의 값을 true 로 하면 구분자도 토큰으로 간주한다. 
int countTokens()		전체 토큰의 수를 반환한다. 
boolean hasMoreTokens()		토큰이 남아있는지 알려준다. 
String nextToken()		다음 토큰을 반환한다. 


2.6 java.math.BigInteger 클래스
BigInteger는 내부적으로 int배열을 사용해서 값을 다룬다. 그래서 long타입보다 훨씬 큰 값을 다룰 수 있는 것이다.
대신 성능은 long 타입보다 떨어질 수 밖에 없다. 
final int signum; // 부호. 1양수, 0, -1음수 셋 중의 하나
final int[] mag; // rkqt

BigInteger 생성
BigInteger를 생성하는 방법은 여러 가지가 있는데, 문자열로 숫자를 표현하는 것이 일반적이다.
정수형 리터럴로는 표현할 수 있는 값의 한계가 있기 때문. 

BigInteger val;
var = new BigInteger("12345678901234567890"); // 문자열을 생성
var = new BigInteger("FFFF",16)  // n진수의 문자열로 생성.
var = BigInteger.valueOf(1234567890L); // 숫자로 생성

다른 타입으로의 변환
BigInteger를 문자열, 또는 byte배열로 변환하는 메서드는 다음과 같다. 
String toString()
String toSString(init raidx)
String toByteArray()

BigInteger도 Number로 부터 상속받은 기본형으로 변환하는 메서드들을 가지고 있다. 
int intValue()
long longValue()
float floatValue()
double doubleValue()
** 정수형으로 변환하는 메서드 중에서 이름 끝에 'Exact'가 붙은 것들은 ㅎ변홚ㄴ 결과가 변환한 타입의 범위에 속하지 않으면 ArithmeticException을 발생시킨다. 

byte byteValueExact();
int intValueExact();
long longvalueExact();

BigInteger의 연산
BigInteger에는 정수형에 사용할 수 있는 모든 연산자와 수학적인 계산을 쉽게 해주는 메서들이 정의되어 있다. 
기본적인 연산을 수행하는 메서드 몇 개만 고르면 아래와 같다. 

BigInteger add(BigInteger val)
BigInteger subtract(BigInteger val)
BigInteger multiply(BigInteger val)
BigInteger divide(BigInteger val)
BigInteger remainder(BigInteger val)

비트 연산 메서드
워낙 큰 숫자를 다루기 위한 클래스이므로, 성능을 향상시키기 위해 비트단위로 연산을 수행하는 메서드들을 많이 가지고 있다. 
and , or , xor, not

int bitCount();
int bitLength();
boolean testBit(int n);
BigInteger setBit(int n);
BigInteger clearBit(int n);
BigInteger flipBit(int n)


2.7 java.math.BigDecimal클래스
double 타입으로 표현할 수 있는 값은 상당히 범위가 넓지만, 정밀도가 최대 13자리 밖에되지 않고 실수형의 특성상 오차를 피할 수 없다. 
BigDecimal은 실수형과 달리 정수를 이용해서 실수를 표현한다. 
정수 * 10 ^ -scale

scale 은 0 부터 Integer.MAX_VALUE 사이의 범위에 있는 값이다. 그리고 BigDeciaml 은 정수를 저장하는데 BigInteger를 사용한다. 
private final BigInteger intVal;
private final int scale;
private transiednt int precision;

BigDecimal val = new BigDecimal("123.45");
System.out.println(val.unscaledValue());
System.out.println(val.scale());
System.out.println(val.precision());

BigDecimal의 생성
BigDecimal를 생성하는 방법은 여러 가지가 있는데, 문자열로 숫자를 표현하는 것이 일반적이다. 
기본형 리터럴로는 표현할 수 있는 값의 한계가 있기 때문이디ㅏ. 
BigDecimal val;
val = new BigDecimal("123.45667880");
val = new BigDecimal(123.456);
val = new BigDecimal(123456);
val = BigDecimal.valueOf(123.456);
val = BigDecimal.valueOf(123456);

다른 타입으로의 변환
BigDecimal을 문자열로 변환하는 메서드는 다음과 같다. 
String toPlainString();
String toString();

BigDecimal도 Number로 부터 상속받은 기본형으로 변환하는 메서드들을 가지고 있다. 
int intValue();
long longValue();
float floatValue();
double doubleValue();

BigDecimal을 정수형으로 변환하는 메서드 중에서 이름 끝에 'Exact'가 붙은 것들은 변환한 결과가 변환한 타입의 범위에 속하지 않으면 ArithmeticException을 발생시킨다. 

BigDeciaml의 연산
BigDecimal add(BigDeciaml val);
BigDecimal subtract(BigDecimal val);
BigDecimal multiply(BigDecimal val);
BigDecimal divide(BigDecimal val)
BigDecimal remainder(BigDecimal val);

반올림 모드 - divide() 와 setScale()
BigDecimal divide(BigDecimal divisor)
BigDecimal divide(BigDecimal divisor, int roundingMode)
BigDecimal divide(BigDecimal divisor, RoundingMode roundingMode)
BigDeciaml divide(BigDecimal divisor, int scale, int roundingMode)
BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode)
BigDecimal divide(BigDeicmal divisor, MathContext mc)

roundingMode는 반올림 처리방법에 대한 것으로 BigDecimal에 정의된 'ROUND_'로 시작하는 상수들 중에 하나를 선택해서 사용하면 된다. 
CELING
FLOOR
UP
DOWN
HALF_UP
HALF_EVEN
HALF_DOWN
UNNECESSARY

java.math.MathContext
이 클래스는 반올림 모드와 정밀도를 하나로 묶어 놓은 것일 뿐 별다른 것이 없다. 

scale 변경
BigDecimal을 10으로 곱하거나 나누는 대신 scale의 값을 변경함으로써 같은 결과를 얻을 수 있다. 
BigDecimal setScale(int newScale);
BigDecimal setScale(int newScale, int roundingMode)
BigDecimal setScale(int newScale, RoundingMode mode)

**** 연습문제 : http://cafe.naver.com/javachobostudy.cafe)
