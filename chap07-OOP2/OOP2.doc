1. 상속 (inheritance)
1.1 상속의 정의와 장점
상속(extends keyward)이란 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것이다. 
class Child extends Parent {
//
}
** 조상 클래스 : 부모(parent)클래스, 상위(super)클래스, 기반(base) 클래스
** 자손 클래스 : 자식(child)클래스 ,  하위(sub)클래스, 파생된(derived)클래스

class Parent {
	int age;
}

class Child extends Parent{ }
int age는 child에 상속 된다. 

## 생성자와 초기화 블럭은 상속되지 않는다. 멤버만 상속된다. 
## 자손 클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다. 

자손 클래스의 인스턴스를 생성하면 조상 클래스의 멤버와 자손 클래스의 멤버가 합쳐진 하나의 인스턴스로 생성된다.

1.2 클래스간의 관계 - 포함관계
상속이외에도 클래스를 재사용하는 또 다른 방법(크래스간에 포함(Composite)) 관계를 맺어 주는 것.
클래스 간의 포함관계를 맺어 주는 것은 한 클래스의 멤버변수로 다른 클래스 타입의 참조변수를 선언하는 것을 뜻한다. 

ex>
class Circle{				class Circle{
	int x;					Point p = new Point();
	int y;					int r;
	int r; 			-->	}
}

class Point{
	int x;
	int y;

}

1.3 클래스간의 관계 결정하기.
클래스를 작성하는데 있어서 상속관계를 맺어 줄 것인지 포함관계를 맺어 줄 것인지 결정 하는 것은 혼돈스러울 수 있다. 
해석으로 판단해 보자
상속 : ~은 ~이다. 로 표현된다면 상속을 사용하자 ( is -a)
포함 : ~은 ~을 가지고 있다. 라고 표현된다면 포함을 사용하자. (has -a)

** 프로그램의 모든 클래스를 분석하여 가능한 많은 관계를 맺도록 노력해서 코드의 재사용성을 높여야 한다. 

1.4 단일 상속(single inheritance)
Java 는 단일 상속을 원칙으로 한다. 다중 상속은 사용 못함. 
그러나 instance 포함을 통해 싱글 상속을 통해 충분휘 다중 상속의 효과를 만들수 있다. 

1.5 Object클래스 - 모든 클래스의 조상

2. 오버라이딩(overriding)
2.1 오버라이딩이란 ? 
조상 클래스로부터 상속받은 메서드의 내용을 변경하는 것을 오버라이딩이라고 한다. ( 모든게 동일 함 - body내용만 다름)

2.2 오버라이딩의 조건
자손 클래스에서 오버라이딩하는 메서드는 조상 클래스의 메서드와 
- 이름이 같아야 한다. 
- 매개변수가 같아야 한다. 
- 반환타입이 같아야 한다. 

**
1. 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경 할 수 없다. 
2. 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다. 

**
조상 클래스의 메서드를 자손 클래스에서 오버라이딩할 때
1. 접근 제어자를 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다. 
2. 예외는 조상 클래스의 메서드ㅗ다 많이 선언할 수 없다. 
3. 인스턴스메서드를 static 메서드 또는 그 반대로 변경 할 수 없다. 

2.3 오버로딩 vs 오버라이딩
오버로딩	: 기존에 없는 새로운 메서드를 정의하는 것
오버라이딩	: 상속받은 메서드의 내용을 변경하는 것

2.4 super
자손클래스에서 조상 클래스로부터 상속받은 멤버를 참조하는데 사용되는 참조 변수이다. 

2.5 super()
this() 와 마찬가지로 super() 역시 생성자 이다. this()는 탙은 클래스의 다른 생성자를 호출하는 데 사용되지만, super()는 조상 클래스의 생성자를 호출하는데 사용돈다. 

<중요>*Object클래스를 제외한 모든 클래스의 생성자 첫 줄에 생성자 this() 또는 super()를 호출해야 한다. 
	그렇지 않으면 컴파일러가 자동으로 'super();'를 생성자의 첫 줄에 삽입한다. 

** 인스턴스를 생성할 때는 클래스를 선택하는 것만큼 생성자를 선택하는 것도 중요하다. 
1. 클래스 - 어떤 클래스의 인스턴스를 생성할 것인가 ?
2. 생성자 - 선택한 클래스의 어떤 생성자를 이용해서 인스턴스를 생성할 것인가 ??

3. package 와 import
3.1 패키지(package)
패키지란 클래스(.class)의 묶음이다.  ==> package = class + interface 의 묶음

- 하나의 소스파일에는 첫 번째 문장으로 단 한 번의 패키지 선언만을 허용한다. 
- 모든 클래스는 반드시 하나의 패키지에 속해야 한다. 
- 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다. 
- 패키지는 물리적으로 클래스 파일(.class)을 포함하는 하나의 디렉토리이다. 

3.2 패키지의 선언
package 패키지명;

3.3 import 문
import문 없이 소스 작성시 매번 패키지명이 포함된 클래스 이름을 사용하면 된다. 
하지만 이러면 너무 힘들어 진다. 이에 import 를 써서 이러한 불편함을 줄인다. 
클래스의 코드를 작성하기 전에 Import문으로 사용하고자 하는 클래스의 패키지를 미리 명시해주고 소스코들에 사용되는 클래스이름에서 패키지명은 생략할 수 있다. 

3.4 Import 문의 선언
일반적인 소스파일(*.java)의 구성은 다음의 순서로 되어 있다. 
1. package문
2. import문
3. 클래스 선언.

3.5 static import문.
import 문을 사용하면 클래스의 패키지명을 생략할 수 있다. 그리고 static 을 붙여 사용하면 class 내임도 생략할 수 있다. 

4. 제어자(modifier)
4.1 제어자란
제어자는 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여한다, 
제어자의 종류는 크게 접근 제어자와 그  외의 제어자로 나눌 수 있다. 
접근 제어자 	:  public > protected > default > private
그 외 제어자	:  static , final , abstract , native, transient , synchronized, volatile, strictfp

4.2 static - 클래스의, 공통적인 ( 기억 !!)
static 은 '클래스의' 또는 ' 공통적인' 의미를 가진다. 
static 이 사용될 수 있는 곳 : 멤버변수, 메서드, 초기화블럭

static	멤버변수	모든 인스턴스에 공통적으로 사용되는 클래스변수가 된다. 
			클래스변수는 인스턴스를 생성하지 않고도 사용 가능하다. 
			클래스가 메모리에 로드될 때 생성된다. 
	메서드		인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다. 
			static 메서드 내에서는 인스턴스멤버들을 직접 사용할 수 없다. (키포인트)

4.3 final - 마지막의 , 변경될수 없는
 final이 사용될 수 있는 곳 - 클래스, 메서드, 멤버변수, 지역변수

final	클래스		변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다. 
			그래스 final 로 지정된 클래스는 다른 클래스의 조상이 될 수 없다. (상속 불가)
	메서드		변경될 수 없는 메서드, final로 지정된 메서드는 오버라이딩을 통해 재정의 불가 (상속 시 overriding 할 수 없음)
	멤버/지역변수	변수 앞에 final 이 붙으면, 값을 변경할 수 없는 상수가 된다. 

** 생성자를 이용한 final 멤버 변수의 초기화
final 이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만, 인스턴스변수의 경우 생성자에서 초기화 되도록 할 수 있다. 
( 이 것을 잘 활용하면, final 이 붙은 멤버변수가 다른 값을 갖도록 하는것이 가능하다. )


4.4 abstract - 추상의 , 미완성의 -- abstract는 instance 화 할 수 없다. 그래서 상속을 통해 재정이가 이뤄져야 한다. 
abstract 가 사용될 수 있는 곳 - 클래스, 메서드

abstarct	클래스		클래스 내에 추상 메서드가 선언되어 있음을 의미한다. 
		메서드		선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 의미한다. 


			
4.5 접근제어자(access modifier)
접근 제어자가 사용될 수 있는 곳 - 클래스 멤버변수 메서드 생성자
private		같은 클래스 내에서만 접근이 가능하다. 
default		같은 패키지 내에서만 가능하다.
protected	같은 패키지 내에서 가능 + 다른 패키지의 자손클래스에서 접근이 가능하다. 
public		접근 제한이 없다. 

** 접근 제어자를 이용한 캡슐화
접근 제어자를 사용하는 이유
- 외부로부터 데이터를 보호하기 위해서
- 외부에는 불필요한, 내부적으로만 사용되는, 부분을 감추기 위해서. 

** 생성자의 접근 제어자
생성자에 접근 제어자를 사용함으로써 인스턴스 생성을 제한할 수 있다. 
class Singleton {
	private Singleton() {
	}
}
위의 경우 외부에서 (다른 클래스에서) 생성자에 접근할 수 없으므로 instance를 생성할 수 없다. 하지만 내부 클래스에서는 instance를 생성할 수 있다. 

class Singleton{
	private static Singleton s = new Singleton();
	private Singeton(){ .... }
	public static Singleton getInstance(){ return s; } --> static 으로 만든 이유는 Singleton 은 private을 이용하여 외부에서 instance를 만들수 없기 때문에 직접 접근할 할 수 있도록 class methos 방식을 사용한다. 이 부분이 static이다. 
 // getInstance()에서 사용할 수 있도록 미리 생성되어야 한다 (static 을 사용한 이유) static 을 사용하지 않았을 경우, 이 멤버변수는 Instance 변수가 되어 instance 생성시 사용이 가능하다. 하지만 접근 제어자가 private 이므로 외부에서 접근이 불가능하며 또한 생성자 역시 private 이므로 instance 화 시킬 수 없다. 이후 getInstance 메서드를 사용시 error 가 발생한다. 

4.6 제어자(modifier)의 조합

클래스	: public , default , final , abstract
메서드  : 모든 접근 제어자 , final, abstarct, static
멤버변수 : 모든 접근 제어자, final, static
지역변수 : final 

1. 메서드에 static과 abstract를 함께 사용할 수 없다. (당연한 소리--> static 을 사용하는 순간 바로 메모리 올라감 abstract는 재정의가 필요)
	static 메서드는 몸통이 있는 메서드에만 사용할 수 있기 때문이다. 
2. 클래스에 abstarct와 final 을 동시에 사용할 수 없다. ( 당연한 소리 -> abstact는 상속 후 재정의 그러나 final은 상속 불가 )
	클래스에 사용되는 final은 클래스를 확장할 수 없다는 의미이고 abstract는 상속을 통해서 완성되어야 한다는 의미이므로 서로 모순되기 때문이다. 
3. abstarct 메서드의 접근 제어자가 private 일 수 없다. (당연: abstarct 메서드는 자손 클래스에서 구현 그러나 private 을 하면 자손에서 접근 불가능)
	abstract메서드는 자손클래스에서 구현해주어야 하는데 접근 제어자가 private이면, 자손클래스에서 접근할 수 없기 때문이다. 

4. 메서드에 Private과 final 을 같이 사용할 필요는 없다. 
	접근 제어자가 Private 인 메서드는 오버라이딩될 수 없기 때문이다. 둘 중 하나만 사용해도 충분


5. 다형성(polymorphism)
5.1 다형성이란?
상속과 함께 객체지향개념의 중요한 특징 중의 하나인 다형성에 대해서 배워보도록 하자. 
다형석은 상속과 깊은 관계가 있다 .
객체지향개념에서 다형성이란 ' 여러 가지 형태를 가질 수 있는 능력'을 의미하며, 자바에서는 한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있도록 함으로써 다형성을 프로그램적으로 구현하였다.
--> 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 하였음. 

class Tv {
	boolean power;
	int channel;
	
	void power(){ power = !power; }
	void channelUp(){ ++channel; }
	void channelDown(){ --channel; }
}

class CaptionTv extends Tv {
	String text;
	void caption();{ //// }
}

Tv t = new Tv();
CaptionTv c = new CaptionTv();
Tv t = new CaptionTv();

t는 Tv type 을 가지는 참조 변수 = New (인스턴스를 생성하라 ) CaptionTv() 라는 그리고 그 주소를 t에 할당하라는 의미이다. 

CaptionTv t = new Tv()	이러면 에러가 발생 왜??
참조변수 t는 captionTv 타입의 참조변수이며, 즉 cationTv > Tv 더 많은 기능을 제고 하고 있다. 이럴 경우 tv에 포함되어 있지 않은 부분을 참조 할 경우 error 발생 

즉 
** 조상타입의 참조변수로 자손타입의 인스턴스를 참조할 수 있다  조상(작은넘) < 자식(큰넘)	
** 반대로 자손타입의 참조변수로 조상타입의 인스턴스를 참조할 수는 없다. ( 큰넘) < 작은넘

5.2 참조변수의 형변환 (당연히 가능)
자손타입 -> 조상타입 ( Up-casting) : 형변환 생략 가능 (기능이 작아 지는 거라 당연함)
조상타입 -> 자식타입 (Down-casting) : 형변환 생략 불가 (기능이 늘어남 즉 명시해 줘야 함)

** 서로 상속관계에 있는 타입간의 형변환은 양방향으로 자유롭게 수행 될 수 있으나, 참조변수가 가리키는 인스턴스의 자손타입으로 형변환은 허용되지 않는다. 
그래서 참조변수가 가르키는 인ㅅ턴스의 타입이 무엇인지 확인하는 것이 중요하다. (instanceoOf)

5.3 instanceof 연산자
참조변수가 참조하고 있는 인스턴스의 실제 타입을 알기 위해 instanceof 를 사용한다. (주로 조건문)

void doWork(Car c){
	if ( c instanceof FireEngine ) {
	} else if ( c instanceof Ambulance) {
	}
}

5.4 참조변수와 인스턴스의 연결
메서드의 경우 조상 클래스의 메서드를 ㅅ자손의 클래스에서 오버라이당한 경우에도 참조 변수의 타입ㄱ에 관계없이 항상 실제 인스턴스의 메서드가 호출되지만, 멤버변수의 경우 참조변수의 타입에 따라 달라진다. 

멤버변수가 조상 클래스와 자손 클래스에 중복으로 정의된 경우
	조상타입의 참조변수를 사용했을 때는 - 조상 클래스에 선언된 멤버변수.
	자손타입의 참조변수를 사용했을 때는 자손 클래스에 선언된 멤버변수가 사용된다. 

중복 정의되지 않은 경우, 조상타입의 참조변수를 사용했을 때와 자손타입의 참조변수를 사용했을 때의 차이는 없다. 

5.5 매개변수의 다형성
참조변수의 다형적인 특징은 메서드의 매개변수에도 적용된다. 

5.6 여러 종류의 객체를 배열로 다루기


6. 추상클래스(abstract class)
6.1 추상클래스란 ?
미완성된 메서드(추상메서드) 가 존재한다는 의미
미완성 된 메서드가 존재하기 때문에 instance를 만들수 없고, 상속을 통해 새롭게 만들어 져야 한다. (완성되어야 한다)

abstact class 클래스이름 { ... }

6.2 추상메서드(abstract method)
미완성 메서드
abstract 리턴타입 메서드이름();

6.3 추상클래스의 작업
추상 - 낱낱의 구체적 표상이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용

추상화 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업
구체화 상속을 통해 클래스를 구현, 확장하는 작업

abstract class Player{
	boolean pause;
	int currentPos;
	Player(){
		pause = false;
		currentPos = 0;
	}

	abstract void play(int pos);
	abstract void stop();
	void play(){
		play(currentPos);
	}
	
	void pause(){
		if(pause) {
			pause = false;
			play(currentPos);
		} else {
			pause = true;
			stop();
		}
	}
}


class CDPlayer extends Player {
	void play(int currentPos) {
		/* 조상 클래스 추상메서드 구현 */
	}

	void stop(){
		/* 조상이 추상 메서드를 구현, */
	}

	int currentTrack;
	void nextTrack(){
		currentTrack++;
	}

	void preTrack(){
		if(currentTrack > 1){
			currentTrack--;
		}
	}
}

7. 인터페이스(interface)
7.1 인터페이스란?
인터페이스는 일종의 추상 클래스이다. 인터페이스는 추상클래스처럼 추상메서드를 갖지만 추상클래스보다 추상화 정도가 높아서 추상클래스와 달리 몸통을 갖춘 일반 메서드 또는 멤버변수를 구성원으로 가질 수 없다. 
오직 추상메서드와 상수만을 멤버로 가질 수 있으며, 그 외의 다른 어떠한 요소도 허용하지 않는다. 

7.2 인터페이스의 작성
키워드가 단지 class 에서 interface를 사용한다는 것만 다름. 
interface 인터페이스이름 {
	public static final 타입 상수이름 = 값;
	public abstract 메서드이름(매개변수목록);
}

- 모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있다.
- 모든 메서드는 public abstract 이어야 하며, 이를 생략할 수 있다. 

interface PlayingCard {
	public static final int SPADE = 4;
	final int DIAMOND = 3; // public static final int DIAMOND =3
	static int HEART = 2; // public stati final int HEART =3;
	int CLOVER =1;		// public static final int CLOVER=1;

	public abstract String getCardNumber();
	String getCardKind(); // public abstract String getCardKind();
}


7.3 인터페이스 상속인터페이스는 인터페이스로부터만 상속받을 수 있으며, 클래스와는 달리 다중상속, 즉 여러 개의 인터페이스로부터 상속을 받는 것이 가능하다. 

interface Moveable {
	void move(int x, int y);
}

interface Attackable {
	void attack(Unit u);
}

interface Fightable extends Movalbe, Attackable { }

7.4 인터페이스의 구현
class 클래스 이름 implements 인터페이스 이름 {
}

class Fighter implements Fightable {
}

7.5 인터페이스를 이용한 다중 상속

7.6 인터페이스를 이용한 다형성
 
7.7 인터페이스의 장점
- 개발 시간을 단축시킬 수 있다. 
- 표준화가 가능하다. 
- 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다. 
- 독립적인 프로그래밍이 가능하다. 

1. 개발시간을 단축 시킬 수 있다. 
한쪽은 선언부만 알면 그것을 사용할 수 있고, 한쪽은 인터페이스를 구현하는 클래스를 작성하여 향 후 합쳐 질 수 있다. 

2. 표준화가 가능하다. 
프록젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다. 

3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다. 
서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다. 

4. 독립적인 프로그램이 가능하다. 
인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제구현에 독립적인 프로그램을 작성하는 것이 가능하다. 
클래스와 클래스간의 직접적인 관계를 인터페이스를 이요해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다. 

7.8 인터페이스의 이해
- 클래스를 사용하는 쪽(user)와 클래스를 제공하는 쪽 (Provider)이 있다. 
- 메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다.(내용을 몰라도 된다.)

